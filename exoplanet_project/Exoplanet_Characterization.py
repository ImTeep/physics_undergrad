from lightkurve import KeplerTargetPixelFile
from lightkurve import KeplerLightCurveFile
import astropy.units as u
import numpy as np
from matplotlib import pyplot as plt
import xlrd

# Open Excel spreadsheet
params = ('/Users/piercejackson/Desktop/School/Junior/1st_Semester/Astro/Astro_Project/Code/stellar_input.xlsx')  # Directory where excel file 'stellar_input.xlsx' is located
wb = xlrd.open_workbook(params)
sheet = wb.sheet_by_index(0)
sheet.cell_value(0, 0)

# Organize data from the excel spreadsheet
param_values = np.zeros((1, 5))
for i in range(sheet.nrows):
    i = int(i)
    row = 5  # Which system in the excel file do you want to look at? Remember to -1 because excel is not 0 indexed. So, if I want to look at the system in row 3 of the excel file, I need to type in '2' here
    stellarsystem = sheet.cell_value(row, 0)
    quarter = sheet.cell_value(row, 1)
    starmass = sheet.cell_value(row, 2)
    starradius = sheet.cell_value(row, 3)
    startemp = sheet.cell_value(row, 4)
print('Stellar System: ', int(stellarsystem), '\nQuarter of Observation: ', int(quarter), '\nHost Star Mass in Solar Masses: ', starmass, '\nRadius of Host Star in Solar Radii: ', starradius, '\nTemperature of Host Star in Kelvin: ', startemp)

# Importing our data (target pixel file)
tpf = KeplerTargetPixelFile.from_archive(int(stellarsystem), quarter=int(quarter))
tpf.plot(aperture_mask=tpf.pipeline_mask)

# Convert the target pixel file into a light curve using the pipeline-defined aperture mask
lc = tpf.to_lightcurve(aperture_mask=tpf.pipeline_mask)
lc.plot()
plt.title("Light Curve from TPF")

# Use Kepler Light Curve File now (rather than being generated by us using a Target Pixel File, these files have been pregenerated using NASAâ€™s Kepler Data Processing Pipeline - contains SAP and PDCSAP flux)
lcf = KeplerLightCurveFile.from_archive(int(stellarsystem), quarter=int(quarter)).PDCSAP_FLUX.remove_nans()
lcf.plot()
plt.title('PDCSAP Flux Light Curve From Archive of Kepler ' + str(stellarsystem))
# lcf.scatter()

print('----------------------------------------')

# Convert light curve file to a periodogram and find orbital period

pg = lcf.to_periodogram()
pg.plot()
pg.plot(format='period', scale='log')

pg = lcf.to_periodogram(oversample_factor=30)  # Adjust this depending on how much oversampling you want. Sometime more is better. Sometimes not. Try different values between 1-35 (35 is kind of extreme though, but it might help). Typically between 5-10 is fine.
period_factor = 3  # Adjust / Fine Tune period (Say LK finds the period at max power to be 2, but you notice it should be 6 instead. Change this term to 3 instead of 1 to adjust fold period - this only affects the periodogram)
period = pg.period_at_max_power * period_factor
lcf.fold(period.value).plot()
plt.title('Light Curve from Periodogram of ' + str(stellarsystem))
print('Orbital Period: {}'.format((period / u.day)) + ' Days')

# Correct light curve for spacecraft thrust
corr_lc = lc.correct(windows=20)
ax = lc.fold(period=period / u.day).scatter(color='red', alpha=0.5, label='With Motion')
ax = corr_lc.fold(period=period / u.day).scatter(ax=ax, color='blue', alpha=0.5, label='Motion Corrected')
plt.title('Motion Corrected Flux Folded at P = {}'.format((period / u.day)) + ' Days')

# Calculate Orbital Distance (a) using Kepler's Law
for i in range(1):
    Msun = 1.989 * 10 ** 30
    Mstar = starmass * Msun
    AU = 1.496 * 10 ** 11
    G = 6.67408 * 10 ** -11
    a = (((G * Mstar * (((period / u.day) * 86400) ** 2)) / (4 * (np.pi ** 2))) ** (1.0 / 3.0))
print('Orbital Distance: ' + str(a / AU) + ' AU')

# Calculate Radius of Planet
for i in range(1):
    flux_minimum = 0.9866  # ********This value needs to be manually obtained from the folded, motion corrected light curve ********
    depth = 1 - flux_minimum
    Rsun = 6.957 * 10 ** 8
    Rstar = starradius * Rsun
    Rjupiter = 6.99 * 10 ** 7
    Rplanet = Rstar * (depth ** (1.0 / 2.0))
print('Planet Radius: ' + str(Rplanet / Rjupiter) + ' Jupiter Radii')

# Calculate Temperature of Planet
for i in range(1):
    Tstar = startemp
    Rsun = 6.957 * 10 ** 8
    Rstar = starradius * Rsun
    Albedo = 0
    Tplanet = Tstar * ((1 - Albedo) ** (1.0 / 4.0)) * (Rstar / (2 * a)) ** (1.0 / 2.0)
print('Planet Temperature: ' + str(Tplanet) + ' K')

# Is it habitable - could liquid water exist on this planet? (I hope so)
if 273 <= Tplanet <= 373:
    print('This planet can host liquid water! :D')
elif Tplanet > 373:
    print('This planet is too hot to host liquid water :(')
elif Tplanet < 273:
    print('This planet is too cold to host liquid water :(')

plt.show()
